{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Case Study\n",
    "Domain – Banking Marketing\n",
    "focus – Optimization\n",
    "\n",
    "Business challenge/requirement\n",
    "\n",
    "Bank of Portugal runs marketing campaign to offer loans to clients. Loan is offered to\n",
    "only clients with particular professions. List of successful campaigns (with client\n",
    "data) is given in attached dataset. You have to come up with program which reads\n",
    "the file and builds a set of unique profession list and given input profession of client –\n",
    "system tells whether client is eligible to be approached for marketing campaign.\n",
    "\n",
    "Key issues\n",
    "Tele Caller can only make x number of cold calls in a day. Hence to increase her\n",
    "effectiveness only eligible customers should be called\n",
    "Considerations\n",
    "Current system does not differentiate clients based on age and profession\n",
    "\n",
    "Data volume\n",
    "447 records in bank-data.csv\n",
    "\n",
    "\n",
    "Additional information\n",
    "- NA\n",
    "\n",
    "Business benefits\n",
    "\n",
    "Company can achieve between 15% to 20% higher conversion by targeting right\n",
    "clients\n",
    "\n",
    "Approach to Solve\n",
    "You have to use fundamentals of Python taught in module 2\n",
    "1. Read file bank-data.csv\n",
    "2. Build a set of unique jobs\n",
    "3. Read the input from command line –profession\n",
    "4. Check if profession is in list\n",
    "5. Print whether client is eligible\n",
    "\n",
    "\n",
    "Enhancements for code\n",
    "You can try these enhancements in code\n",
    "1. Compute max and min age for loan eligibility based on data in csv file\n",
    "2. Store max and min age in dictionary\n",
    "3. Make the profession check case insensitive\n",
    "4. Currently program ends after the check. Take the input in while loop and end\n",
    "only if user types \"END\" for profession\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['student', 'blue-collar', 'management', 'technician', 'housemaid', 'admin.', 'self-employed', 'entrepreneur', 'services']\n",
      "enter profession blue-collar\n",
      "Foud!! --You are eligible\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import csv\n",
    "\n",
    "newfile=(\"/Users/atul595525/Desktop/learning/Edureka_courses/Python_For_Data_Science/Class_3_Deep_Dive_Functions_OOPs_Modules_Errors_andExceptions/574_m3_datasets_v3.0/bank-data.csv\")\n",
    "\n",
    "#for i in range(1,10):\n",
    "#    print(newfile.read())\n",
    "\n",
    "lst=[]\n",
    "\n",
    "with open(newfile, \"r\") as csv_file:\n",
    "    csv_reader = csv.reader(csv_file, delimiter=',')\n",
    "    for lines in csv_reader:\n",
    "        #print(lines[1])\n",
    "        lst.append(lines[1])\n",
    "lst.pop(0)\n",
    "unique_jobs =set(lst)\n",
    "\n",
    "def convert(set): \n",
    "    return [*set, ] \n",
    "\n",
    "my_list_of_unique_jobs = (convert(unique_jobs))\n",
    "\n",
    "print(my_list_of_unique_jobs)\n",
    "\n",
    "#my_list_of_unique_jobs=list(unique_jobs)\n",
    "#my_list_of_unique_jobs\n",
    "\n",
    "#unique_jobs\n",
    "\n",
    "input_txt = input(\"enter profession \")\n",
    "\n",
    "def search(list,n): \n",
    "  \n",
    "    for i in range(len(list)): \n",
    "        if list[i] == n: \n",
    "            return True\n",
    "    return False\n",
    "\n",
    "list = my_list_of_unique_jobs \n",
    "  \n",
    "# Driver Code \n",
    "n = input_txt\n",
    "  \n",
    "if search(list, n): \n",
    "    print(\"Found!! --You are eligible\") \n",
    "else: \n",
    "    print(\"Not Found --You are not eligible\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '80']\n",
      "{'min': '19', 'max': '80'}\n"
     ]
    }
   ],
   "source": [
    "#1. Compute max and min age for loan eligibility based on data in csv file\n",
    "#2. Store max and min age in dictionary\n",
    "\n",
    "list_of_age=[]\n",
    "\n",
    "with open(newfile, \"r\") as csv_file:\n",
    "    csv_reader = csv.reader(csv_file, delimiter=',')\n",
    "    for lines in csv_reader:\n",
    "        #print(lines[1])\n",
    "        list_of_age.append(lines[0])\n",
    "\n",
    "list_of_age.pop(0)\n",
    "\n",
    "unique_age =set(list_of_age)\n",
    "\n",
    "def convert(set): \n",
    "    return [*set, ] \n",
    "\n",
    "my_list_of_unique_ages = (convert(unique_age))\n",
    "\n",
    "#print(my_list_of_unique_ages)\n",
    "\n",
    "sorted_list = sorted(my_list_of_unique_ages)\n",
    "print(sorted_list)\n",
    "\n",
    "\n",
    "listOfStr = [\"min\", \"max\"]\n",
    "listofnumbers=[sorted_list[0],sorted_list[-1]]\n",
    "listofnumbers\n",
    "\n",
    "zipbObj = zip(listOfStr, listofnumbers)\n",
    "\n",
    "# Create a dictionary from zip object\n",
    "dictOfWords = dict(zipbObj)\n",
    "\n",
    "print(dictOfWords)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['student', 'blue-collar', 'management', 'technician', 'housemaid', 'admin.', 'self-employed', 'entrepreneur', 'services']\n",
      "['student', 'blue-collar', 'management', 'technician', 'housemaid', 'admin.', 'self-employed', 'entrepreneur', 'services']\n",
      "enter profession STUDENT\n",
      "Found!! --You are eligible\n"
     ]
    }
   ],
   "source": [
    "# 3. Make the profession check case insensitive\n",
    "import os\n",
    "import csv\n",
    "\n",
    "newfile=(\"/Users/atul595525/Desktop/learning/Edureka_courses/Python_For_Data_Science/Class_3_Deep_Dive_Functions_OOPs_Modules_Errors_andExceptions/574_m3_datasets_v3.0/bank-data.csv\")\n",
    "\n",
    "#for i in range(1,10):\n",
    "#    print(newfile.read())\n",
    "\n",
    "lst=[]\n",
    "\n",
    "with open(newfile, \"r\") as csv_file:\n",
    "    csv_reader = csv.reader(csv_file, delimiter=',')\n",
    "    for lines in csv_reader:\n",
    "        #print(lines[1])\n",
    "        lst.append(lines[1])\n",
    "lst.pop(0)\n",
    "unique_jobs =set(lst)\n",
    "\n",
    "def convert(set): \n",
    "    return [*set, ] \n",
    "\n",
    "my_list_of_unique_jobs = (convert(unique_jobs))\n",
    "\n",
    "print(my_list_of_unique_jobs)\n",
    "\n",
    "my_list_of_unique_jobs_case = []\n",
    "\n",
    "for job in my_list_of_unique_jobs:\n",
    "    my_list_of_unique_jobs_case.append(job.lower())\n",
    "\n",
    "print(my_list_of_unique_jobs_case)\n",
    "\n",
    "\n",
    "input_txt = input(\"enter profession \").lower()\n",
    "\n",
    "def search(list,n): \n",
    "  \n",
    "    for i in range(len(list)): \n",
    "        if list[i] == n: \n",
    "            return True\n",
    "    return False\n",
    "\n",
    "list = my_list_of_unique_jobs_case \n",
    "  \n",
    "# Driver Code \n",
    "n = input_txt\n",
    "  \n",
    "if search(list, n): \n",
    "    print(\"Found!! --You are eligible\") \n",
    "else: \n",
    "    print(\"Not Found --You are not eligible\") \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Currently program ends after the check. Take the input in while loop and end\n",
    "#only if user types \"END\" for profession\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
